



    
        
    




{
  "result": {
    "content": "\u003cp\u003e慢慢補足實務上會用到的基礎知識，這次來看看如何把用Node.js製作的app用Docker執行，並加上web server，本次範例是Nginx + NestJS\u003c/p\u003e\n\u003cp\u003e步驟就兩個\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca onclick=\"window.scrollTo({top: document.getElementById(1).offsetTop, behavior: 'smooth'})\"\u003e使用Node image執行Nest App\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca onclick=\"window.scrollTo({top: document.getElementById(2).offsetTop, behavior: 'smooth'})\"\u003e使用Nginx Reverse Proxy\u003c/a\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e最終目標是讓Client透過Web Server的Reverse Proxy連上另一container上的app，將來不論app是express或koa等等，都是用這招\u003c/p\u003e\n\u003ch3 id=1\u003e使用Node image執行Nest App\u003c/h3\u003e\r\n\u003chr\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n現在測試用的目錄是這樣，my-app是目標的Nest Project\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ tree -L 1\r\n.\r\n├── docker-compose.yml\r\n└── my-app\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\ncompose file也陽春一點\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-docker-compose.yml\" data-lang=\"docker-compose.yml\"\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;3\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enode\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enode\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e#使用node:latest image\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3000:3000\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eworking_dir\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/my-app\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e#工作目錄為/my-app\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n      - \u003cspan style=\"color:#ae81ff\"\u003e./my-app:/my-app\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e#將當前目錄的my-app掛載到/my-app\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003etest\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eipv4_address\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e172.16.239.10\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ecommand\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enpm run start\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e#啟動Nest的指令\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003etest\u003c/span\u003e: \n      \u003cspan style=\"color:#f92672\"\u003eipam\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003edriver\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edefault\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003econfig\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003esubnet\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;172.16.239.0/24\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n試著up試試看\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# docker-compose up\r\n...\r\nnode_1  | \u0026gt; my-nest-app@0.0.1 start\r\nnode_1  | \u0026gt; nest start\r\nnode_1  | \r\nnode_1  | [Nest] 36   - 10/26/2020, 8:52:37 AM   [NestFactory] Starting Nest application...\r\nnode_1  | [Nest] 36   - 10/26/2020, 8:52:37 AM   [InstanceLoader] AppModule dependencies initialized +10ms\r\nnode_1  | [Nest] 36   - 10/26/2020, 8:52:37 AM   [RoutesResolver] AppController {}: +3ms\r\nnode_1  | [Nest] 36   - 10/26/2020, 8:52:37 AM   [RouterExplorer] Mapped {, GET} route +3ms\r\nnode_1  | [Nest] 36   - 10/26/2020, 8:52:37 AM   [NestApplication] Nest application successfully started +1ms\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e似乎很順利\n\u003cbr\u003e\u003c/br\u003e\n因為是新開的project，所以@Get('/')只有return一個Hello World!，但這也足夠表示app順利運行\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl localhost:3000\r\nHello World!\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003ch3 id=2\u003e使用Nginx Reverse Proxy\u003c/h3\u003e\r\n\u003chr\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e建立好nginx用的config，新增目錄nginx，裡面放個default.conf\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ tree -L 2\r\n.\r\n├── docker-compose.yml\r\n├── my-app\r\n│   ├── db\r\n│   ├── dist\r\n│   ├── nest-cli.json\r\n│   ├── node_modules\r\n│   ├── ormconfig.json\r\n│   ├── package.json\r\n│   ├── package-lock.json\r\n│   ├── README.md\r\n│   ├── src\r\n│   ├── test\r\n│   ├── tsconfig.build.json\r\n│   └── tsconfig.json\r\n└── nginx\r\n    └── default.conf\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\nreverse proxy是http，和之前用的wsgi、scg或fast_cgi不同，必須要加上prefix\u003c/p\u003e\n\u003cpre\u003e\u003ccode class=\"language-:nginx/default.conf\" data-lang=\":nginx/default.conf\"\u003eserver {\r\n    listen       80;\r\n    listen  [::]:80;\r\n    server_name  localhost;\r\n\r\n    location / {\r\n        proxy_pass http://172.16.239.10:3000;\r\n    }\r\n}\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\ncompose file也新增上nginx\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-:docker-compose.yml\" data-lang=\":docker-compose.yml\"\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;3\u0026#39;\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enode\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enode\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3000:3000\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eworking_dir\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e/my-app\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n      - \u003cspan style=\"color:#ae81ff\"\u003e./my-app:/my-app\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n      \u003cspan style=\"color:#f92672\"\u003etest\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003eipv4_address\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e172.16.239.10\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003ecommand\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enpm run start\u003c/span\u003e\n\n\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e  \u003cspan style=\"color:#f92672\"\u003enginx\u003c/span\u003e:\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enginx\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e#使用nginx:latest\u003c/span\u003e\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;80:80\u0026#34;\u003c/span\u003e\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e      - \u003cspan style=\"color:#ae81ff\"\u003e./nginx:/etc/nginx/conf.d\u003c/span\u003e \u003cspan style=\"color:#75715e\"\u003e#掛載config\u003c/span\u003e\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e      \u003cspan style=\"color:#f92672\"\u003etest\u003c/span\u003e:\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e        \u003cspan style=\"color:#f92672\"\u003eipv4_address\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003e172.16.239.11\u003c/span\u003e\n\u003c/span\u003e\n\u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003etest\u003c/span\u003e: \n      \u003cspan style=\"color:#f92672\"\u003eipam\u003c/span\u003e:\n        \u003cspan style=\"color:#f92672\"\u003edriver\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003edefault\u003c/span\u003e\n        \u003cspan style=\"color:#f92672\"\u003econfig\u003c/span\u003e:\n          - \u003cspan style=\"color:#f92672\"\u003esubnet\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;172.16.239.0/24\u0026#34;\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n接下來run看看\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e# docker-compose up\r\n...\r\nnginx_1  | /docker-entrypoint.sh: /docker-entrypoint.d/ is not empty, will attempt to perform configuration\r\nnginx_1  | /docker-entrypoint.sh: Looking for shell scripts in /docker-entrypoint.d/\r\nnginx_1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/10-listen-on-ipv6-by-default.sh\r\nnode_1   | \r\nnode_1   | \u0026gt; my-nest-app@0.0.1 start\r\nnode_1   | \u0026gt; nest start\r\nnode_1   | \r\nnginx_1  | 10-listen-on-ipv6-by-default.sh: error: IPv6 listen already enabled\r\nnginx_1  | /docker-entrypoint.sh: Launching /docker-entrypoint.d/20-envsubst-on-templates.sh\r\nnginx_1  | /docker-entrypoint.sh: Configuration complete; ready for start up\r\nnode_1   | [Nest] 36   - 10/26/2020, 9:07:40 AM   [NestFactory] Starting Nest application...\r\nnode_1   | [Nest] 36   - 10/26/2020, 9:07:40 AM   [InstanceLoader] AppModule dependencies initialized +13ms\r\nnode_1   | [Nest] 36   - 10/26/2020, 9:07:40 AM   [RoutesResolver] AppController {}: +6ms\r\nnode_1   | [Nest] 36   - 10/26/2020, 9:07:40 AM   [RouterExplorer] Mapped {, GET} route +4ms\r\nnode_1   | [Nest] 36   - 10/26/2020, 9:07:40 AM   [NestApplication] Nest application successfully started +2ms\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e如果port 80能看到Nest的Hello World，就代表reverse proxy成功作用了\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl localhost:3000\r\nHello World!\r\n\u003c/code\u003e\u003c/pre\u003e",
    "kind": "page",
    "params": {
      "categories": [
        "Web Development",
        "Operation"
      ],
      "date": "2020-10-21T16:51:28+08:00",
      "draft": false,
      "iscjklanguage": true,
      "lastmod": "2020-10-21T16:51:28+08:00",
      "publishdate": "2020-10-21T16:51:28+08:00",
      "tags": [
        "Docker",
        "Node.js"
      ],
      "title": "Docker化Node.js的Web App"
    },
    "permalink": "https://mikanbearer.github.io/posts/2020/10/202010211651/index.json",
    "type": "posts",
    "wordcount": 975
  }
}