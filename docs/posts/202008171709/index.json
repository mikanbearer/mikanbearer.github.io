



    
        
    




{
  "result": {
    "content": "\u003cp\u003e作為往後可能需要自訂Exporter的預習，就試著拿\u003ca href=\"https://prometheus.io/docs/instrumenting/clientlibs/\"\u003ePrometheus client library\u003c/a\u003e來玩玩…這次使用官方提供的Python版本，藉由這次練習來更加熟練操作Exporter\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\u003ca onclick=\"window.scrollTo({top: document.getElementById(1).offsetTop, behavior: 'smooth'})\"\u003e測試Prometheus Client Library\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca onclick=\"window.scrollTo({top: document.getElementById(2).offsetTop, behavior: 'smooth'})\"\u003e搭配Node exporter text collector\u003c/a\u003e\u003c/li\u003e\n\u003cli\u003e\u003ca onclick=\"window.scrollTo({top: document.getElementById(3).offsetTop, behavior: 'smooth'})\"\u003e搭配Pushgateway\u003c/a\u003e\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=1\u003e測試Prometheus Client Library\u003c/h3\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n環境是debian 9及python 3.5.3\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$  cat /etc/*-release\r\nPRETTY_NAME=\u0026quot;Debian GNU/Linux 9 (stretch)\u0026quot;\r\nNAME=\u0026quot;Debian GNU/Linux\u0026quot;\r\nVERSION_ID=\u0026quot;9\u0026quot;\r\nVERSION=\u0026quot;9 (stretch)\u0026quot;\r\nID=debian\r\nHOME_URL=\u0026quot;https://www.debian.org/\u0026quot;\r\nSUPPORT_URL=\u0026quot;https://www.debian.org/support\u0026quot;\r\nBUG_REPORT_URL=\u0026quot;https://bugs.debian.org/\u0026quot;\r\n\r\n$ python --version\r\nPython 3.5.3\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n先用一下好久沒碰的Pipenv，避免環境弄亂\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ pip3 install -U pipenv\r\n$ pipenv --python 3\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n下載prometheus client，然後用shell\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ pipenv install prometheus-client\r\n$ pipenv shell\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n\u003ca href=\"https://github.com/prometheus/node_exporter/\"\u003ereadme.md\u003c/a\u003e中的範例，是使用start_http_server，因為本身就是一個頗為簡短的script，\n使用while True來持續執行\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e prometheus_client \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e start_http_server, Summary\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e random\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e time\n\n\u003cspan style=\"color:#75715e\"\u003e# Create a metric to track time spent and requests made.\u003c/span\u003e\nREQUEST_TIME \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e Summary(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;request_processing_seconds\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Time spent processing request\u0026#39;\u003c/span\u003e)\n\n\u003cspan style=\"color:#75715e\"\u003e# Decorate function with metric.\u003c/span\u003e\n\u003cspan style=\"color:#a6e22e\"\u003e@REQUEST_TIME.time\u003c/span\u003e()\n\u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eprocess_request\u003c/span\u003e(t):\n    \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;\u0026#34;\u0026#34;A dummy function that takes some time.\u0026#34;\u0026#34;\u0026#34;\u003c/span\u003e\n    time\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esleep(t)\n\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\n    \u003cspan style=\"color:#75715e\"\u003e# Start up the server to expose the metrics.\u003c/span\u003e\n    start_http_server(\u003cspan style=\"color:#ae81ff\"\u003e8000\u003c/span\u003e)\n    \u003cspan style=\"color:#75715e\"\u003e# Generate some requests.\u003c/span\u003e\n    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e True:\n        process_request(random\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom())\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n來看看start_http_server的廬山真面目\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e\u0026gt;\u0026gt;\u0026gt; import prometheus_client\r\n\u0026gt;\u0026gt;\u0026gt; import inspect\r\n\r\n\u0026gt;\u0026gt;\u0026gt; print(inspect.getsource(prometheus_client.start_http_server))\r\ndef start_wsgi_server(port, addr='', registry=REGISTRY):\r\n    \u0026quot;\u0026quot;\u0026quot;Starts a WSGI server for prometheus metrics as a daemon thread.\u0026quot;\u0026quot;\u0026quot;\r\n    app = make_wsgi_app(registry)\r\n    httpd = make_server(addr, port, app, ThreadingWSGIServer, handler_class=_SilentHandler)\r\n    t = threading.Thread(target=httpd.serve_forever)\r\n    t.daemon = True\r\n    t.start()\r\n\r\n\u0026gt;\u0026gt;\u0026gt; print(inspect.getsource(prometheus_client.start_wsgi_server))\r\ndef start_wsgi_server(port, addr='', registry=REGISTRY):\r\n    \u0026quot;\u0026quot;\u0026quot;Starts a WSGI server for prometheus metrics as a daemon thread.\u0026quot;\u0026quot;\u0026quot;\r\n    app = make_wsgi_app(registry)\r\n    httpd = make_server(addr, port, app, ThreadingWSGIServer, handler_class=_SilentHandler)\r\n    t = threading.Thread(target=httpd.serve_forever)\r\n    t.daemon = True\r\n    t.start()\r\n\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e由此可見start_http_server和start_wsgi_server是同一個function，當這支script執行完了後，Thread也一併結束\n\u003cbr\u003e\u003c/br\u003e\n執行後一樣cURL測試一下取得的metrics\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl http://localhost:8000\r\n# HELP process_virtual_memory_bytes Virtual memory size in bytes.\r\n# TYPE process_virtual_memory_bytes gauge\r\nprocess_virtual_memory_bytes 2.17821184e+08\r\n# HELP process_resident_memory_bytes Resident memory size in bytes.\r\n# TYPE process_resident_memory_bytes gauge\r\nprocess_resident_memory_bytes 2.0774912e+07\r\n# HELP process_start_time_seconds Start time of the process since unix epoch in seconds.\r\n# TYPE process_start_time_seconds gauge\r\nprocess_start_time_seconds 1.59764690706e+09\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n當然也可以用custom collector，記得要用REGISTRY.register將collector註冊\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e prometheus_client.core \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e GaugeMetricFamily, REGISTRY\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e prometheus_client \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e start_http_server\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e random\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e time\n\n\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCustomCollector\u003c/span\u003e(object):\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e(self):\n        g \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e GaugeMetricFamily(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;my_Gauge\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Help text\u0026#39;\u003c/span\u003e, labels\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e])\n        g\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd_metric([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;bar\u0026#39;\u003c/span\u003e], random\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandint(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e))\n        g\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd_metric([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;baz\u0026#39;\u003c/span\u003e], random\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom())\n        \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e g\n\nREGISTRY\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eregister(CustomCollector())\n\n\u003cspan style=\"color:#66d9ef\"\u003eif\u003c/span\u003e __name__ \u003cspan style=\"color:#f92672\"\u003e==\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;__main__\u0026#39;\u003c/span\u003e:\n    start_http_server(\u003cspan style=\"color:#ae81ff\"\u003e8000\u003c/span\u003e)\n    \u003cspan style=\"color:#66d9ef\"\u003ewhile\u003c/span\u003e True:\n        time\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003esleep(\u003cspan style=\"color:#ae81ff\"\u003e10\u003c/span\u003e)\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n可以看到metrics包含剛才測試的custom collector了，看得出start_http_server是指向REGISTRY，而REGISTRY又包含了collector，所以server每pull一次，就會執行一次註冊到REGISTRY的collector\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl http://localhost:8000 \r\n# HELP my_Gauge Help text\r\n# TYPE my_Gauge gauge\r\nmy_Gauge{foo=\u0026quot;bar\u0026quot;} 84.0\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e大致上是這樣，雖然能動，但單單是這樣似乎有點不太夠，畢竟單獨使用的話功能實在有點陽春\u003c/p\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=2\u003e搭配Node exporter text collector\u003c/h3\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n\u003ca href=\"https://github.com/prometheus/node_exporter\"\u003eNode exporter\u003c/a\u003e出馬的時候又到了，Node Exporter的Textfile collector就能在此發揮作用\u003c/p\u003e\n\u003cp\u003e現在更改剛才測試用的.py如下\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e prometheus_client.core \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e GaugeMetricFamily, REGISTRY\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e prometheus_client \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e write_to_textfile\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e random\n\n\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCustomCollector\u003c/span\u003e(object):\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e(self):\n        g \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e GaugeMetricFamily(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;my_Gauge\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Help text\u0026#39;\u003c/span\u003e, labels\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e])\n        g\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd_metric([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;bar\u0026#39;\u003c/span\u003e], random\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandint(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e))\n        g\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd_metric([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;baz\u0026#39;\u003c/span\u003e], random\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom())\n        \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e g\n\nREGISTRY\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eregister(CustomCollector())\n\n\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003ewrite_to_textfile(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;test.prom\u0026#39;\u003c/span\u003e, REGISTRY)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e這樣就會將registry的中的metrics通通輸出到一個叫做\u0026quot;test.prom\u0026quot;的file裡了\n\u003cbr\u003e\u003c/br\u003e\n之後Node exporter再使用\u0026ndash;collector.textfile.directory這個flag就能取得指定目錄下*.prom內的metrics，範例指令如下：\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e./node_exporter  --web.listen-address=\u0026quot;0.0.0.0:9100\u0026quot; --collector.textfile.directory ~/test\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n一樣測試一下\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl http://127.0.0.1:9000/metrics\r\n...\r\nmy_Gauge{foo=\u0026quot;bar\u0026quot;} 90\r\nmy_Gauge{foo=\u0026quot;baz\u0026quot;} 0.7249480740635738\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e這樣就能pull file裡面的東西了\u003c/p\u003e\n\u003cp\u003e如此一來不只能用crontab之類的來排程，甚至在其他程式裡加上write_to_textfile，到時候只需要讓node_exporter去指定目錄抓就好，彈性又便利，這是這做法會犧牲掉Counter\u003c/p\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e\n\u003ch3 id=3\u003e搭配Pushgateway\u003c/h3\u003e\r\n\u003c/li\u003e\n\u003c/ul\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\nClient library除了能使用write_to_textfile來搭配Node exporter，也能配合Pushgateway\u003c/p\u003e\n\u003cp\u003e修改剛才測試的py如下：\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cdiv style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\n\u003ctable style=\"border-spacing:0;padding:0;margin:0;border:0;width:auto;overflow:auto;display:block;\"\u003e\u003ctr\u003e\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;\"\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 1\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 2\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 3\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 4\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 5\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 6\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 7\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 8\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e 9\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e10\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e11\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e12\n\u003c/span\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e13\n\u003c/span\u003e\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003e\u003cspan style=\"margin-right:0.4em;padding:0 0.4em 0 0.4em;color:#7f7f7f\"\u003e14\n\u003c/span\u003e\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\n\u003ctd style=\"vertical-align:top;padding:0;margin:0;border:0;;width:100%\"\u003e\n\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-py\" data-lang=\"py\"\u003e\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e prometheus_client.core \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e GaugeMetricFamily, REGISTRY\n\u003cspan style=\"color:#f92672\"\u003efrom\u003c/span\u003e prometheus_client \u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e push_to_gateway\n\u003cspan style=\"color:#f92672\"\u003eimport\u003c/span\u003e random\n\n\u003cspan style=\"color:#66d9ef\"\u003eclass\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003eCustomCollector\u003c/span\u003e(object):\n    \u003cspan style=\"color:#66d9ef\"\u003edef\u003c/span\u003e \u003cspan style=\"color:#a6e22e\"\u003ecollect\u003c/span\u003e(self):\n        g \u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e GaugeMetricFamily(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;my_Gauge\u0026#39;\u003c/span\u003e, \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Help text\u0026#39;\u003c/span\u003e, labels\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e[\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;foo\u0026#39;\u003c/span\u003e])\n        g\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd_metric([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;bar\u0026#39;\u003c/span\u003e], random\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandint(\u003cspan style=\"color:#ae81ff\"\u003e1\u003c/span\u003e, \u003cspan style=\"color:#ae81ff\"\u003e100\u003c/span\u003e))\n        g\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eadd_metric([\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;baz\u0026#39;\u003c/span\u003e], random\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003erandom())\n        \u003cspan style=\"color:#66d9ef\"\u003eyield\u003c/span\u003e g\n\nREGISTRY\u003cspan style=\"color:#f92672\"\u003e.\u003c/span\u003eregister(CustomCollector())\n\n\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003epush_to_gateway(\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;localhost:9091\u0026#39;\u003c/span\u003e, job\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#39;batchA\u0026#39;\u003c/span\u003e, registry\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003eREGISTRY)\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/td\u003e\u003c/tr\u003e\u003c/table\u003e\n\u003c/div\u003e\n\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\ncURL測試一下\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl http://localhost:9091/metrics\r\n...\r\n# HELP python_gc_collections_total Number of times this generation was collected\r\n# TYPE python_gc_collections_total counter\r\npython_gc_collections_total{generation=\u0026quot;0\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 42\r\npython_gc_collections_total{generation=\u0026quot;1\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 3\r\npython_gc_collections_total{generation=\u0026quot;2\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 0\r\n# HELP python_gc_objects_collected_total Objects collected during gc\r\n# TYPE python_gc_objects_collected_total counter\r\npython_gc_objects_collected_total{generation=\u0026quot;0\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 145\r\npython_gc_objects_collected_total{generation=\u0026quot;1\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 25\r\npython_gc_objects_collected_total{generation=\u0026quot;2\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 0\r\n# HELP python_gc_objects_uncollectable_total Uncollectable object found during GC\r\n# TYPE python_gc_objects_uncollectable_total counter\r\npython_gc_objects_uncollectable_total{generation=\u0026quot;0\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 0\r\npython_gc_objects_uncollectable_total{generation=\u0026quot;1\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 0\r\npython_gc_objects_uncollectable_total{generation=\u0026quot;2\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;} 0\r\n# HELP python_info Python platform information\r\n# TYPE python_info gauge\r\npython_info{implementation=\u0026quot;CPython\u0026quot;,instance=\u0026quot;\u0026quot;,job=\u0026quot;batchA\u0026quot;,major=\u0026quot;3\u0026quot;,minor=\u0026quot;6\u0026quot;,patchlevel=\u0026quot;8\u0026quot;,version=\u0026quot;3.6.8\u0026quot;} 1\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n完\u003c/p\u003e",
    "kind": "page",
    "params": {
      "categories": [
        "Monitoring"
      ],
      "date": "2020-08-17T17:09:27+08:00",
      "draft": false,
      "iscjklanguage": true,
      "lastmod": "2020-08-17T17:09:27+08:00",
      "publishdate": "2020-08-17T17:09:27+08:00",
      "tags": [
        "Prometheus",
        "Python"
      ],
      "title": "【Prometheus入門練習-自訂篇1】使用Prometheus client library自訂metrics"
    },
    "permalink": "https://mikanbearer.github.io/posts/202008171709/index.json",
    "type": "posts",
    "wordcount": 1535
  }
}