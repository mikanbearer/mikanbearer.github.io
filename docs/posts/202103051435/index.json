



    
        
    




{
  "result": {
    "content": "\u003cp\u003e在\u003ca href=\"#/posts/posts%2F202102201502\" target=\"_blank\"\u003e前篇\u003c/a\u003e練習過PowerShell後，試著做個Bash版本，本篇偏重於一些小眉角\u003c/p\u003e\n\u003cp\u003e最後完成的成果放在\u003ca href=\"https://gist.github.com/mikanbearer/ffdc97216adda7515469f13af16a76e7\" target=\"_blank\"\u003e這裡\u003c/a\u003e\u003c/p\u003e\n\u003cp\u003e首先是傳送訊息的部分，使用nc就可以了\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003e\u003cspan style=\"color:#66d9ef\"\u003efunction\u003c/span\u003e SendUDPMessage \u003cspan style=\"color:#f92672\"\u003e{\u003c/span\u003e\n    Server\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$1\n    Message\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$2\n    UDPPort\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e$3\n\n    echo -n \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eecho $Message | tr \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e | cut -c 1-1024\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e | nc -4u -w1 $Server $UDPPort\n\u003cspan style=\"color:#f92672\"\u003e}\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e括號裡面的stdout中有個pipeline tr，是避免message因為空格被分段，bash的分隔符號預設是空格\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003ecall上述function時，一律先用tr把' \u0026lsquo;換成\u0026rsquo;_'\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eSendUDPMessage $Server \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eecho $Message | tr \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e $UDPPort\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003ebash沒有物件導向，所以輸出都是純粹的字串處理，基本上就是一直使用管道指令處理成自己想要的樣子，像是grep、sed、awk等等\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003eOsName=$(cat /etc/os-release | grep 'PRETTY_NAME=' | sed 's/PRETTY_NAME=\\\u0026quot;//g' | sed 's/\\\u0026quot;//g')\r\nMemorySize=$(($(cat /proc/meminfo | grep 'DirectMap4k' | grep -oEiw '[0-9]+')+$(cat /proc/meminfo | grep 'DirectMap2M' | grep -oEiw '[0-9]+')))\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n像CPU的處理比較艱困一點，使用\u003ccode\u003elscpu\u003c/code\u003e\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ lscpu\r\nArchitecture:        x86_64\r\nCPU op-mode(s):      32-bit, 64-bit\r\nByte Order:          Little Endian\r\nCPU(s):              2\r\nOn-line CPU(s) list: 0,1\r\nThread(s) per core:  1\r\nCore(s) per socket:  1\r\nSocket(s):           2\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e為了節省訊息數量，把socket、core、thred都乘算出來\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eCPUModel\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003elscpu | grep \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Model name\u0026#39;\u003c/span\u003e | sed \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;s/Model name:\\s*//g\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\nSockets\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003elscpu | grep \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Socket(s)\u0026#39;\u003c/span\u003e | grep -oEi \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[0-9]+$\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\nCores\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(($(\u003c/span\u003elscpu | grep \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Core(s) per socket\u0026#39;\u003c/span\u003e | grep -oEi \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[0-9]+$\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eSockets\u003cspan style=\"color:#66d9ef\"\u003e))\u003c/span\u003e\nThreads\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(($(\u003c/span\u003elscpu | grep \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;Thread(s) per core\u0026#39;\u003c/span\u003e | grep -oEi \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;[0-9]+$\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e*\u003c/span\u003eCores\u003cspan style=\"color:#66d9ef\"\u003e))\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003evolume使用df輸出\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ df -T\r\nFilesystem     Type     1K-blocks    Used Available Use% Mounted on\r\nudev           devtmpfs    977044       0    977044   0% /dev\r\ntmpfs          tmpfs       201752    1196    200556   1% /run\r\n/dev/sda2      ext4      20508240 5207808  14235628  27% /\r\n...\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e把每一行的分隔符號取代成底線，這樣每行都會是array中的element\u003c/p\u003e\n\u003cpre\u003e\u003ccode\u003e$ v=($(df -T | grep -oEi '^/dev/.+' | tr ' ' '_'))\r\n\r\n$ for i in ${v[@]}; do echo $i; done;\r\n/dev/sda2______ext4______20508240_5207808__14235628__27%_/\r\n/dev/loop0_____squashfs____101632__101632_________0_100%_/snap/core/10859\r\n/dev/loop1_____squashfs____100736__100736_________0_100%_/snap/core/10823\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e就能輕鬆迴圈處理了\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-bash\" data-lang=\"bash\"\u003eVolumns\u003cspan style=\"color:#f92672\"\u003e=(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003edf -T | grep -oEi \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;^/dev/s.+\u0026#39;\u003c/span\u003e | tr \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003efor\u003c/span\u003e i in \u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eVolumns[@]\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\n\u003cspan style=\"color:#66d9ef\"\u003edo\u003c/span\u003e\n    v\u003cspan style=\"color:#f92672\"\u003e=(\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eecho $i | tr \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e\u003cspan style=\"color:#f92672\"\u003e)\u003c/span\u003e\n    Message\u003cspan style=\"color:#f92672\"\u003e=\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\u0026#34;{\\\u0026#34;host\\\u0026#34;:\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003eHostname\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;,\\\u0026#34;name\\\u0026#34;:\\\u0026#34;Volumn\\\u0026#34;,\\\u0026#34;value\\\u0026#34;:{\\\u0026#34;Name\\\u0026#34;:\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003ev[0]\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;,\\\u0026#34;FSType\\\u0026#34;:\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003ev[1]\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;,\\\u0026#34;Size\\\u0026#34;:\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003ev[2]\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;,\\\u0026#34;Free\\\u0026#34;:\\\u0026#34;\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e${\u003c/span\u003ev[4]\u003cspan style=\"color:#e6db74\"\u003e}\u003c/span\u003e\u003cspan style=\"color:#e6db74\"\u003e\\\u0026#34;}}\u0026#34;\u003c/span\u003e\n    SendUDPMessage $Server \u003cspan style=\"color:#66d9ef\"\u003e$(\u003c/span\u003eecho $Message | tr \u003cspan style=\"color:#e6db74\"\u003e\u0026#39; \u0026#39;\u003c/span\u003e \u003cspan style=\"color:#e6db74\"\u003e\u0026#39;_\u0026#39;\u003c/span\u003e\u003cspan style=\"color:#66d9ef\"\u003e)\u003c/span\u003e $UDPPort \n\u003cspan style=\"color:#66d9ef\"\u003edone\u003c/span\u003e\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e完成的成果就放在gist上隨時供自己參考\u003c/p\u003e",
    "kind": "page",
    "params": {
      "categories": [
        "Tricks"
      ],
      "date": "2021-03-05T14:35:01+08:00",
      "draft": false,
      "iscjklanguage": true,
      "lastmod": "2021-03-05T14:35:01+08:00",
      "publishdate": "2021-03-05T14:35:01+08:00",
      "tags": [
        "Bash",
        "Linux"
      ],
      "title": "透過Bash傳送JSON格式的UDP Message"
    },
    "permalink": "https://mikanbearer.github.io/posts/202103051435/index.json",
    "type": "posts",
    "wordcount": 585
  }
}