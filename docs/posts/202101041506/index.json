



    
        
    




{
  "result": {
    "content": "\u003cp\u003e這次玩的\u003ca href=\"https://nodered.org/\" target=\"_blank\"\u003eNode-RED\u003c/a\u003e是一款執行於Node.js環境的Flow-based development tool，也就是一短low-code的工具，能使用流程圖的方式操作並達到各式各樣的效果。\u003c/p\u003e\n\u003cp\u003e這次嘗試是配合其他REST API，主要練習的部分則是使用Node-RED來調整http request\u003c/p\u003e\n\u003ch3 id=\"測試vcenter\"\u003e測試vCenter\u003c/h3\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n首先參考\u003ca href=\"https://developer.vmware.com/docs/vsphere-automation/latest/vcenter/vcenter/\" target=\"_blank\"\u003eVMware官方文件的記述\u003c/a\u003e來使用vCenter的REST API，本次實驗操作vCenter的步驟，就選擇抓datacenter的列表了，以cURL的操作範例如下：\u003c/p\u003e\n\u003cul\u003e\n\u003cli\u003e使用basic auth取得session id\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl -k -X POST -u 'administrator@vsphere.local:password' https://192.168.149.100/rest/com/vmware/cis/session\r\n{\u0026quot;value\u0026quot;:\u0026quot;b66ece43566e6b325dd7cdfc30fd2457\u0026quot;}\r\n\u003c/code\u003e\u003c/pre\u003e\u003cul\u003e\n\u003cli\u003e使用session id取得datacenter列表\u003c/li\u003e\n\u003c/ul\u003e\n\u003cpre\u003e\u003ccode\u003e$ curl -k -X GET --header 'vmware-api-session-id: b66ece43566e6b325dd7cdfc30fd2457' https://192.168.149.100/rest/vcenter/datacenter\r\n{\u0026quot;value\u0026quot;:[{\u0026quot;name\u0026quot;:\u0026quot;Datacenter\u0026quot;,\u0026quot;datacenter\u0026quot;:\u0026quot;datacenter-21\u0026quot;}]}\r\n\u003c/code\u003e\u003c/pre\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n所以理論上要獲得一模一樣的結果\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003ch3 id=\"安裝node-red\"\u003e安裝Node-RED\u003c/h3\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n準備安裝主角的\u003ca href=\"https://nodered.org/docs/getting-started/\" target=\"_blank\"\u003eNode-RED\u003c/a\u003e，安裝方法眾多，這裡選擇用docker compose\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-:docker-compose.yml\" data-lang=\":docker-compose.yml\"\u003e\u003cspan style=\"color:#f92672\"\u003eversion\u003c/span\u003e: \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;3.7\u0026#34;\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003eservices\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enode-red\u003c/span\u003e:\n    \u003cspan style=\"color:#f92672\"\u003eimage\u003c/span\u003e: \u003cspan style=\"color:#ae81ff\"\u003enodered/node-red:latest\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003eports\u003c/span\u003e:\n      - \u003cspan style=\"color:#e6db74\"\u003e\u0026#34;1880:1880\u0026#34;\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n      - \u003cspan style=\"color:#ae81ff\"\u003enode-red-net\u003c/span\u003e\n    \u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n      - \u003cspan style=\"color:#ae81ff\"\u003enode-red-data\u003c/span\u003e\n\n\u003cspan style=\"color:#f92672\"\u003evolumes\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enode-red-data\u003c/span\u003e:\n\n\u003cspan style=\"color:#f92672\"\u003enetworks\u003c/span\u003e:\n  \u003cspan style=\"color:#f92672\"\u003enode-red-net\u003c/span\u003e:\n\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e輸入指令就能用了，接下來只要打開瀏覽器，在網址輸入http://[hostname or ip]:1880，就能使用，且會是第一個flow的畫面\u003c/p\u003e\n\u003cdiv class=\"highlight\"\u003e\u003cpre style=\"color:#f8f8f2;background-color:#272822;-moz-tab-size:4;-o-tab-size:4;tab-size:4\"\u003e\u003ccode class=\"language-text\" data-lang=\"text\"\u003e# docker-compose up\nStarting node-red_node-red_1 ... done\nAttaching to node-red_node-red_1\nnode-red_1  | \nnode-red_1  | \u0026gt; node-red-docker@1.2.6 start /usr/src/node-red\nnode-red_1  | \u0026gt; node $NODE_OPTIONS node_modules/node-red/red.js $FLOWS \u0026#34;--userDir\u0026#34; \u0026#34;/data\u0026#34;\nnode-red_1  | \nnode-red_1  | 5 Jan 03:17:37 - [info] \nnode-red_1  | \nnode-red_1  | Welcome to Node-RED\nnode-red_1  | ===================\nnode-red_1  | \nnode-red_1  | 5 Jan 03:17:37 - [info] Node-RED version: v1.2.6\nnode-red_1  | 5 Jan 03:17:37 - [info] Node.js  version: v10.23.0\nnode-red_1  | 5 Jan 03:17:37 - [info] Linux 3.10.0-1160.11.1.el7.x86_64 x64 LE\nnode-red_1  | 5 Jan 03:17:37 - [info] Loading palette nodes\nnode-red_1  | 5 Jan 03:17:38 - [info] Settings file  : /data/settings.js\nnode-red_1  | 5 Jan 03:17:38 - [info] Context store  : \u0026#39;default\u0026#39; [module=memory]\nnode-red_1  | 5 Jan 03:17:38 - [info] User directory : /data\nnode-red_1  | 5 Jan 03:17:38 - [warn] Projects disabled : editorTheme.projects.enabled=false\nnode-red_1  | 5 Jan 03:17:38 - [info] Flows file     : /data/flows.json\nnode-red_1  | 5 Jan 03:17:38 - [warn] \n...\nnode-red_1  | 5 Jan 03:17:38 - [info] Starting flows\nnode-red_1  | 5 Jan 03:17:38 - [info] Started flows\n\u003cspan style=\"display:block;width:100%;background-color:#3c3d38\"\u003enode-red_1  | 5 Jan 03:17:38 - [info] Server now running at http://127.0.0.1:1880/\n\u003c/span\u003e\u003c/code\u003e\u003c/pre\u003e\u003c/div\u003e\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003ch3 id=\"node基本介紹\"\u003eNode基本介紹\u003c/h3\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n首先建立基本的三個node，由inject開始，此為flow啟動的起始點，拉過來名稱會自動顯示為timestamp\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"0_1.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e再來是http request\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"0_2.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e最後是debug，能將最後的msg顯示出來\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"0_3.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003ch3 id=\"從vcenter取得session-id\"\u003e從vCenter取得session id\u003c/h3\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\n現在有三個node了，接下來就取得必要的id，基本上vCenter REST API所有動作都必須要帶上這個id\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"1.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e設定inject node，紅色處打勾勾，如此一來在deploy的0.1秒會執行，repeat維持None，不做repeat\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"2.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e設定request，這裡比較複雜一點，method為POST，url指向vCenter的auth url，如果vCenter沒有有效憑證的話請設定TLS configuration，停用Verify server certificate(註1)，最後設定basic auth\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"3.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e此為註1\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"3_1.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e接下來把各node連起來就能deploy了，得到一個華麗的error，unsupported media type\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"4.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003eunsupported media type是指API無法辨識POST content type，這裡要給他多一個http header告訴server咱們的type是啥，所以在inject與request之前增加一個function node\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"5.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003emsg本身為object，增加一個nested object，key為headers，裡面放的就是咱們的header\n\u003cimg src=\"6.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e接下來再deploy一次就能取得session id了\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"7.png\" alt=\"\"\u003e\u003c/p\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003ch3 id=\"使用session-id\"\u003e使用session id\u003c/h3\u003e\n\u003chr\u003e\n\u003cp\u003e\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e接下來新增一些node，主要是再來一組function與http request，避免混亂補上命名\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"8.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e建立一個新的nested object做為新的msg，並於headers中增加\u003ccode\u003evmware-api-session-id\u003c/code\u003e，value則是從舊的msg中抽出\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"9.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003e取得datacenter list的request，method為GET，比POST basic auth單純許多\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"10.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e\n\u003cp\u003edeploy後就能看到datacenter list了，跟最前面使用cURL測試的結果一樣\u003c/p\u003e\n\u003cp\u003e\u003cimg src=\"11.png\" alt=\"\"\u003e\n\u003cbr\u003e\u003c/br\u003e\u003c/p\u003e",
    "kind": "page",
    "params": {
      "categories": [
        "RPA"
      ],
      "date": "2021-01-04T15:06:04+08:00",
      "draft": false,
      "iscjklanguage": true,
      "lastmod": "2021-01-04T15:06:04+08:00",
      "publishdate": "2021-01-04T15:06:04+08:00",
      "tags": [
        "Node-RED",
        "vCenter"
      ],
      "title": "使用Node-RED操作vCenter API"
    },
    "permalink": "https://mikanbearer.github.io/posts/202101041506/index.json",
    "type": "posts",
    "wordcount": 1421
  }
}