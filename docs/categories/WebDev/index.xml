<?xml version="1.0" encoding="utf-8" standalone="yes"?>
<rss version="2.0" xmlns:atom="http://www.w3.org/2005/Atom">
  <channel>
    <title>WebDev on 垃圾堆</title>
    <link>https://mikanbearer.github.io/categories/WebDev/</link>
    <description>Recent content in WebDev on 垃圾堆</description>
    <generator>Hugo -- gohugo.io</generator>
    <language>en-us</language>
    <lastBuildDate>Thu, 15 Oct 2020 14:57:25 +0800</lastBuildDate><atom:link href="https://mikanbearer.github.io/categories/WebDev/index.xml" rel="self" type="application/rss+xml" />
    <item>
      <title>從今天開始學NestJS</title>
      <link>https://mikanbearer.github.io/posts/2020/10/202010151457/</link>
      <pubDate>Thu, 15 Oct 2020 14:57:25 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/10/202010151457/</guid>
      <description>&lt;p&gt;好久不見的從今天開始系列…&lt;/p&gt;
&lt;p&gt;這次的NestJS是個能用TypeScript撰寫的framework，有提供nest-cli來迅速建立project，適合用來做些小型的backend app
，其十分Angular的風格也是其吸引人之處&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用YouTube影片作為網頁背景</title>
      <link>https://mikanbearer.github.io/posts/2020/10/202010141635/</link>
      <pubDate>Wed, 14 Oct 2020 16:35:05 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/10/202010141635/</guid>
      <description>&lt;p&gt;最近覺得影片當背景的網站挺漂亮的，想想要如法炮製的話總會有個簡單易用的plugin，
這次找到的就是這個jquery.mb.YTPlayer&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://github.com/pupunzi/jquery.mb.YTPlayer&#34;&gt;https://github.com/pupunzi/jquery.mb.YTPlayer&lt;/a&gt;&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>Vue Router在同一route component傳遞新的query string</title>
      <link>https://mikanbearer.github.io/posts/2020/10/202010061053/</link>
      <pubDate>Tue, 06 Oct 2020 10:53:36 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/10/202010061053/</guid>
      <description>&lt;p&gt;弄這個blog遇到的問題，想使用Vue Router來取代Hugo部分list功能的小筆記&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Vue Loading Overlay追加過場動畫</title>
      <link>https://mikanbearer.github.io/posts/2020/09/202009261450/</link>
      <pubDate>Sat, 26 Sep 2020 14:50:43 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/09/202009261450/</guid>
      <description>&lt;p&gt;不久前才想用vuetify的v-overlay與v-progress-circular來做個loading的延遲畫面，就意外發現了這個好東西：&lt;/p&gt;
&lt;p&gt;&lt;a href=&#34;https://www.npmjs.com/package/vue-loading-overlay&#34;&gt;vue-loading-overlay&lt;/a&gt;，馬上就來試一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>讓Hugo輸出JSON格式</title>
      <link>https://mikanbearer.github.io/posts/2020/09/202009221717/</link>
      <pubDate>Tue, 22 Sep 2020 17:17:48 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/09/202009221717/</guid>
      <description>&lt;p&gt;計畫使用Hugo來製作Single Page，有JSON會方便很多，許多地方寫得不是很清楚所以筆記一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Angular嘗試製作SPA登入畫面</title>
      <link>https://mikanbearer.github.io/posts/2020/09/202009211136/</link>
      <pubDate>Mon, 21 Sep 2020 11:36:54 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/09/202009211136/</guid>
      <description>&lt;p&gt;練習的時候到啦，這次一樣是用登入畫面，本篇寫作風格有點改變，嘗試放多一點圖(尤其gif)，內文不包含API的部分，大部分都是盲做，不完善的地方非常之多…&lt;/p&gt;
&lt;p&gt;畢竟，熟能生巧嘛(;´Д`A ```&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>從今天開始學Angular</title>
      <link>https://mikanbearer.github.io/posts/2020/09/202009181018/</link>
      <pubDate>Fri, 18 Sep 2020 10:18:52 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/09/202009181018/</guid>
      <description>&lt;p&gt;從今天開始系列最新作，沒方向的時候就是學framework的最好時機(？&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Flask入門練習-CRUD篇4】使用Flask-WTF導入CSRF Protection</title>
      <link>https://mikanbearer.github.io/posts/2020/09/202009151049/</link>
      <pubDate>Tue, 15 Sep 2020 10:49:11 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/09/202009151049/</guid>
      <description>&lt;p&gt;暫定是最後一個入門練習，這次使用Flask-WTF來做CSRF Protection，Flask-WTF是WTForms結合Flask用的module&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Flask入門練習-CRUD篇3】使用Flask-Login實作登入畫面</title>
      <link>https://mikanbearer.github.io/posts/2020/09/202009141257/</link>
      <pubDate>Mon, 14 Sep 2020 12:57:20 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/09/202009141257/</guid>
      <description>&lt;p&gt;這次實作目標是導入Flask-Login，讓咱們的app受驗證機制保護&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Flask入門練習-CRUD篇2】製作簡單的CRUD</title>
      <link>https://mikanbearer.github.io/posts/2020/09/202009111635/</link>
      <pubDate>Fri, 11 Sep 2020 16:35:19 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/09/202009111635/</guid>
      <description>&lt;p&gt;經過了前面的練習，咱們的小App已經有了ORM，既然有了ORM，不做成CRUD(Create、Read、Update、Delete)怎麼行？&lt;/p&gt;
&lt;p&gt;所以繼續動手做&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Flask入門練習-CRUD篇1】在Flask中導入ORM操作</title>
      <link>https://mikanbearer.github.io/posts/2020/08/202008271612/</link>
      <pubDate>Thu, 27 Aug 2020 16:12:20 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/08/202008271612/</guid>
      <description>&lt;p&gt;Flask本身沒自帶ORM對製作CRUD而言是略為麻煩，這裡就使用SQLAlchemy來操作資料庫，剛好有個&lt;a href=&#34;https://flask-sqlalchemy.palletsprojects.com/en/2.x/&#34;&gt;Flask-SQLAlchemy&lt;/a&gt;可使用，大大縮短coding時間&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Prometheus入門練習-自訂篇2】將Prometheus API取得的資料搭配Vue.js製作Echarts動態圖表</title>
      <link>https://mikanbearer.github.io/posts/2020/08/202008241004/</link>
      <pubDate>Mon, 24 Aug 2020 10:04:45 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/08/202008241004/</guid>
      <description>&lt;p&gt;要是不想用自帶的UI，也不想用Grafana怎麼辦！！那當然就是自己動手做啦，自己動手做的好處就是能整合其他功能做成多合一的Web app，但這次就先練習如何取用Prometheus上的資料，製作成動態圖表&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>從今天開始學Flask</title>
      <link>https://mikanbearer.github.io/posts/2020/08/202008191354/</link>
      <pubDate>Wed, 19 Aug 2020 13:54:41 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/08/202008191354/</guid>
      <description>&lt;p&gt;以往用的framework都是Django，但總不可能靠一招就打天下…所以便來轉戰Flask了，畢竟在某些情境下，使用這種輕量化的framework會更合適&lt;/p&gt;
&lt;p&gt;和Django不同，Flask不像Django這麼複雜，預設也只有最低限度的功能，也不像Django自帶ORM，
因此是個自由度相當高的framework，接下來就開始動手練習&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Moment.js處理日期時間</title>
      <link>https://mikanbearer.github.io/posts/2020/08/202008151135/</link>
      <pubDate>Sat, 15 Aug 2020 11:35:45 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/08/202008151135/</guid>
      <description>&lt;p&gt;一個處理時間的library，覺得蠻好用得所以筆記一下&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Django &#43; Channels部屬WebSocket簡易聊天室</title>
      <link>https://mikanbearer.github.io/posts/2020/08/202008100108/</link>
      <pubDate>Mon, 10 Aug 2020 01:08:04 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/08/202008100108/</guid>
      <description>&lt;p&gt;製作一個網頁聊天室，首先要讓服務端和用戶端實現異步通訊，而服務端要包含一個訊息貯列，讓所有符合條件的用戶端都能收到相應的訊息，
剛好可作為Message Queue及Web Socket的練習。&lt;/p&gt;
&lt;p&gt;本篇Message Queue使用RabbitMQ，Framework使用Django，並且由Channels來實現Web Socket&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>動態更新Echarts</title>
      <link>https://mikanbearer.github.io/posts/2020/08/202008092021/</link>
      <pubDate>Sun, 09 Aug 2020 20:21:46 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/08/202008092021/</guid>
      <description>&lt;p&gt;之前工作上需要一個前端的圖表庫，最後就相中了百度的Echarts，像是要做監控的話，前端的圖表要動態更新就變得很重要了&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>在Nginx或Apache上設定CORS</title>
      <link>https://mikanbearer.github.io/posts/2020/07/202007301419/</link>
      <pubDate>Thu, 30 Jul 2020 14:19:49 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/07/202007301419/</guid>
      <description>&lt;p&gt;Web Server沒定義相關的Header的話，就沒辦法Preflight Request，所以必須額外設定，使用&lt;a href=&#34;https://mikanbearer.github.io/myblog/posts/202007291642/&#34;&gt;這篇&lt;/a&gt;來實作，本篇包含Nginx及Apache的設定範例&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用docker-compose部屬Nginx &#43; uWSGI &#43; Django</title>
      <link>https://mikanbearer.github.io/posts/2020/07/202007291642/</link>
      <pubDate>Wed, 29 Jul 2020 16:42:11 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/07/202007291642/</guid>
      <description>&lt;p&gt;雖然docker-compose真的很方便，為了一鍵部屬些東西，還是爬一下文，避免處處碰壁…&lt;/p&gt;
&lt;p&gt;這次使用以下兩篇舊文的範例來練習&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Vue.js &#43; Vuetify製作SPA登入畫面</title>
      <link>https://mikanbearer.github.io/posts/2020/07/202007262314/</link>
      <pubDate>Sun, 26 Jul 2020 23:14:14 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/07/202007262314/</guid>
      <description>&lt;p&gt;利用Vuetify這個最近蠻流行的UI Kit來做一個SPA的練習，當然首選就是登入畫面了，這次順帶附加上nested route，
往後可作為隨時能取用的範例，code依然很醜，不合理及多餘的部分之後再慢慢修正…&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Django &#43; Celery進行異步處理</title>
      <link>https://mikanbearer.github.io/posts/2020/07/202007221111/</link>
      <pubDate>Wed, 22 Jul 2020 11:11:37 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/07/202007221111/</guid>
      <description>&lt;p&gt;本篇旨在project中增加異步執行的功能，增進使用者體驗，避免東西沒跑完response等了老半天等不到的窘境，
目前只提供簡單的範例，不包含異步任務的情境應用&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Django API實作-入門篇2】在Django REST framework上導入JWT驗證</title>
      <link>https://mikanbearer.github.io/posts/2020/07/202007201501/</link>
      <pubDate>Mon, 20 Jul 2020 15:01:14 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/07/202007201501/</guid>
      <description>&lt;p&gt;承之前的範例，這次要用JSON Web Token驗證，並加上Cross-Origin Resource Sharing&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用watch監控的一些寫法</title>
      <link>https://mikanbearer.github.io/posts/2020/07/202007201139/</link>
      <pubDate>Mon, 20 Jul 2020 11:39:17 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/07/202007201139/</guid>
      <description>&lt;p&gt;想到要利用watch來監視複數data property，但寫出來都是重是又冗長，所以整理了一些比較彈性的寫法&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>【Django API實作-入門篇1】使用Django REST framework超高速部屬RESTful API</title>
      <link>https://mikanbearer.github.io/posts/2020/07/202007161628/</link>
      <pubDate>Thu, 16 Jul 2020 16:28:26 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/07/202007161628/</guid>
      <description>&lt;p&gt;這次作為複習，利用djangorestframework製作一個陽春的REST API
何謂RESTful就不贅述了，直接開始實做&lt;/p&gt;</description>
    </item>
    
    <item>
      <title>使用Django超高速部屬CRUD</title>
      <link>https://mikanbearer.github.io/posts/2020/07/202007151013/</link>
      <pubDate>Wed, 15 Jul 2020 10:14:15 +0800</pubDate>
      
      <guid>https://mikanbearer.github.io/posts/2020/07/202007151013/</guid>
      <description>&lt;p&gt;這次僅是做一個超級簡易，能做到Create、Read、Update、Delete的Web App，&lt;br&gt;
為了避免版面過長，此篇僅有陽春的Template View，並沒有做Filter及Pagenation…&lt;/p&gt;</description>
    </item>
    
  </channel>
</rss>
